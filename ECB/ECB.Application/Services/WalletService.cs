using ECB.Domain;
using System.Reflection;
using System.Text;

namespace ECB.Application
    {
    /// <summary>
    /// Service responsible for wallet operations such as creation, balance retrieval, and adjustments,
    /// including currency conversion using current rates and cache.
    /// </summary>
    public class WalletService : IWalletService
        {
        private readonly IWalletRepository _walletrepo;
        private readonly ICurrencyRatesRepository _currencyratesrepo;
        private readonly ICurrencyRatesCache _currencycache;

        /// <summary>
        /// Constructs a WalletService with required repositories and cache.
        /// </summary>
        public WalletService(IWalletRepository repo, ICurrencyRatesRepository cur_repo, ICurrencyRatesCache currencycache)
            {
            _walletrepo = repo;
            _currencyratesrepo = cur_repo;
            _currencycache = currencycache;
            }

        /// <summary>
        /// Creates a new wallet asynchronously.
        /// </summary>
        /// <param name="walletdto">Wallet data transfer object containing initial data.</param>
        /// <returns>The created wallet entity.</returns>
        public async Task<Wallet> CreateWalletAsync(Wallet walletdto)
            {
            var wallet = new Wallet
            (
                id: 0, // Id will be generated by the database
                balance: walletdto.Balance,
                currency: walletdto.Currency
            );

            await _walletrepo.CreateAsync(wallet);
            return wallet;
            }

        /// <summary>
        /// Gets the balance of a wallet in the requested currency, converting if needed.
        /// </summary>
        /// <param name="walletId">Wallet identifier.</param>
        /// <param name="currency">Target currency for balance. If null or matches wallet's currency, no conversion is performed.</param>
        /// <returns>Balance in the requested currency.</returns>
        /// <exception cref="KeyNotFoundException">Thrown if wallet is not found.</exception>
        public async Task<decimal> GetBalanceAsync(long walletId, string currency)
            {
            var wallet = await _walletrepo.GetByIdAsync(walletId);
            if (wallet == null)
                throw new KeyNotFoundException("Wallet not found");

            if (wallet.Currency == currency || String.IsNullOrEmpty(currency))
                return wallet.Balance;

            return await ConvertCurrency(wallet.Balance, wallet.Currency, currency);
            }

        /// <summary>
        /// Adjusts the balance of a wallet using the provided strategy, converting the amount if currencies differ.
        /// </summary>
        /// <param name="walletId">Wallet identifier.</param>
        /// <param name="amount">Amount to adjust.</param>
        /// <param name="currency">Currency of the amount.</param>
        /// <param name="strategy">Strategy for adjusting the balance (e.g., add or subtract).</param>
        /// <exception cref="KeyNotFoundException">Thrown if wallet is not found.</exception>
        public async Task AdjustBalanceAsync(long walletId, decimal amount, string currency, IBalanceStrategy strategy)
            {
            var wallet = await _walletrepo.GetByIdAsync(walletId);
            if (wallet == null)
                throw new KeyNotFoundException("Wallet not found");

            // Convert amount to wallet's currency if different
            if (wallet.Currency != currency)
                amount = await ConvertCurrency(amount, currency, wallet.Currency);

            strategy.Adjust(wallet, amount);

            await _walletrepo.UpdateAsync(wallet);
            }

        /// <summary>
        /// Converts an amount from one currency to another using rates from the repository/cache.
        /// </summary>
        /// <param name="amount">Amount to convert.</param>
        /// <param name="fromCurrency">Source currency.</param>
        /// <param name="toCurrency">Target currency.</param>
        /// <returns>The converted amount.</returns>
        private async Task<decimal> ConvertCurrency(decimal amount, string fromCurrency, string toCurrency)
            {
            if (fromCurrency == "EUR")
                {
                var rate = await _currencyratesrepo.GetCurrencyRateAsync(toCurrency);
                return amount * rate;
                }
            else
                {
                // Convert first to EUR, then to the target currency
                var fromrate = await GetCurrencyRate(fromCurrency);
                var fromamount = amount / fromrate;
                var torate = toCurrency == "EUR" ? 1 : await GetCurrencyRate(toCurrency);
                return torate * fromamount;
                }
            }

        /// <summary>
        /// Gets the exchange rate for the specified currency, using the cache if available, otherwise querying the repository.
        /// </summary>
        /// <param name="currency">Currency code.</param>
        /// <returns>The exchange rate.</returns>
        private async Task<decimal> GetCurrencyRate(string currency)
            {
            decimal? rate = 0m;
            rate = _currencycache.GetRate(currency);
            if (rate is null)
                rate = await _currencyratesrepo.GetCurrencyRateAsync(currency);
            return rate.Value;
            }
        }
    }